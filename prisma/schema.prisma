generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())

  email    String @unique
  password String?
  name     String
  phone    String
  avatar   String?

  roles    UserRoles @default(USER)

  ads Ad[]
  favorites FavoriteAd[]

  reviews Review[]
  bookings Booking[]
  tokens Token[]

  resetPasswordCode   String?
  resetPasswordExpires DateTime?

  chatsAsUser1 Chat[] @relation("User1Chats")
  chatsAsUser2 Chat[] @relation("User2Chats")

  messages Message[] @relation("UserMessages")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user")
}

model Chat {
  id String @id @default(cuid())


  userId1 String
  userId2 String

  user1 User @relation("User1Chats",fields: [userId1], references: [id])
  user2 User @relation("User2Chats",fields: [userId2], references: [id])
  messages Message[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  @@unique([userId1, userId2])
  @@map("chat")
}

model Message {
  id String @id @default(cuid())
  text String
  author User @relation("UserMessages", fields: [authorId], references: [id])
  authorId String

  chat Chat @relation(fields: [chatId], references: [id])
  chatId String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  @@map("message")
}

model Ad {
  id String @id @default(cuid())
  description String
  mainPhoto String
  photos    String[]
  title String

  adType       AdTypes
  propertyType PropertyTypes
  deal         Deal?
  booking      Booking[]
  propertyDetails PropertyDetails?
  features        String[]

  views         Int?   @default(0)
  favorites FavoriteAd[]

  location   Location @relation(fields: [locationId], references: [id])
  locationId Int

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String

  contact Contact @relation(fields: [contactId], references: [id])
  contactId String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([adType])
  @@index([propertyType])
  @@index([features])
  @@unique([id, ownerId])
  @@map("ad")
}

model PropertyDetails {
  id String @id @default(cuid())

  ad     Ad     @relation(fields: [adId], references: [id])
  adId   String @unique
  fields Json   @db.JsonB

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("property_details")
}

model Deal {
  id String @id @default(cuid())

  ad   Ad     @relation(fields: [adId], references: [id])
  adId String @unique

  price        Int
  fields       Json

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("deal")
}

model FavoriteAd {
  id String @id @default(cuid())

  ad   Ad     @relation(fields: [adId], references: [id])
  adId String

  user   User     @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  @@index([adId])
  @@index([userId])
  @@unique([adId, userId])
  @@map("favorite_ad")
}

model Contact {
  id String @id @default(cuid())
  ad Ad[]

  name String
  email String
  phone String

  communication String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("contact")

}

model Booking {
  id        String   @id @default(cuid())
  startDate DateTime
  endDate   DateTime

  ad   Ad?     @relation(fields: [adId], references: [id])
  adId String

  renter   User   @relation(fields: [renterId], references: [id])
  renterId String

  guestCounts Int
  guestName String
  guestPhone String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("booking")
}

model Location {
  id        Int    @id @default(autoincrement())
  latitude  Float
  longitude Float
  city      String
  address    String
  ads       Ad[]

  @@unique([latitude, longitude, city, address])
  @@index([latitude, longitude])
  @@map("location")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String
  userId    String?  @unique
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("review")
}

model Token {
  id String @id @default(cuid())
  used Boolean
  jit String @unique

  user User? @relation(fields: [userId], references: [id])
  userId String
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([createdAt])
  @@index([used])
  @@map("token")
}

enum UserRoles {
  USER
  ADMIN
}

enum AdTypes {
  rent_short
  rent_long
  sell
}

enum PropertyTypes {
  house
  apartment
}

enum PropertyDealTypes {
  rentApartment
  rentHouse
}
